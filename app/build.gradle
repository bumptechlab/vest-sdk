plugins {
    id 'com.android.application'
}

def androidConfig = rootProject.ext.android
def dependenciesConfig = rootProject.ext.dependencies
def namespaces = rootProject.ext.namespaces
def mavenConfig = rootProject.ext.maven

android {
    namespace namespaces.app
    compileSdk androidConfig.compileSdkVersion

    defaultConfig {
        applicationId "com.example.vest.sdk.app"
        minSdkVersion androidConfig.minSdkVersion
        targetSdkVersion androidConfig.targetSdkVersion
        versionCode androidConfig.versionCode
        versionName mavenConfig.version
        multiDexEnabled true
    }

    signingConfigs {
        release {
            storeFile file("./keystore/dev-func-aar.jks")
            storePassword "dev-func-aar"
            keyAlias "dev-func-aar"
            keyPassword "dev-func-aar"
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            signingConfig signingConfigs.release
        }
        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

android.applicationVariants.all { variant ->
    // 修改APK名称
    variant.outputs.all { output ->
        outputFileName = "vest-sdk-v${variant.versionName}-${variant.buildType.name}.apk"
    }
}

dependencies {
    // 方式一：引入Maven依赖
    implementation 'io.github.bumptechlab:vest-core:0.9.15-lite'
    implementation 'io.github.bumptechlab:vest-sdk:0.9.15-lite'
    implementation 'io.github.bumptechlab:vest-shf:0.9.15-lite'

    // 方式二：引入工程依赖
//    implementation project(":app-core")
//    implementation project(":app-sdk")
//    implementation project(":app-shf")
//    implementation 'androidx.multidex:multidex:' + dependenciesConfig.androidxMultidexVersion
//    implementation 'androidx.annotation:annotation:' + dependenciesConfig.androidxAnnotation

    // 方式三：引入本地Libs依赖（同时要引入以下三方依赖）
//    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
//    implementation 'com.google.android.material:material:' + dependenciesConfig.googleMaterialVersion
//    implementation 'androidx.multidex:multidex:' + dependenciesConfig.androidxMultidexVersion
//    implementation 'androidx.annotation:annotation:' + dependenciesConfig.androidxAnnotation
//    implementation 'com.android.installreferrer:installreferrer:' + dependenciesConfig.installreferrerVersion
//    implementation 'com.google.android.gms:play-services-ads-identifier:' + dependenciesConfig.googlePlayServiceVersion
//    implementation 'com.squareup.okhttp3:okhttp:' + dependenciesConfig.okhttpVersion
//    implementation 'com.squareup.okhttp3:logging-interceptor:' + dependenciesConfig.okhttpVersion
//    implementation 'com.adjust.sdk:adjust-android:' + dependenciesConfig.adjustVersion
//    implementation 'cn.thinkingdata.android:ThinkingAnalyticsSDK:' + dependenciesConfig.thinkingDataSdkVersion
//    implementation 'cn.thinkingdata.android:TAThirdParty:' + dependenciesConfig.thinkingDataThirdPartyVersion
//    implementation "androidx.security:security-crypto:" + dependenciesConfig.securityCryptoVersion
//    implementation "androidx.security:security-identity-credential:" + dependenciesConfig.securityIdentityCredentialVersion
//    implementation "androidx.security:security-app-authenticator:" + dependenciesConfig.securityAppAuthenticatorVersion
}