plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}
def taskName = getGradle().getStartParameter().getTaskNames().toString()
if (taskName.containsIgnoreCase("firebase")) {
    apply plugin: 'com.google.gms.google-services'
}

def androidConfig = rootProject.ext.android
def dependenciesConfig = rootProject.ext.dependencies
def namespaces = rootProject.ext.namespaces
def mavenConfig = rootProject.ext.maven

android {
    namespace namespaces.app
    compileSdk androidConfig.compileSdkVersion

    defaultConfig {
        applicationId "com.example.vest.sdk.app"
        minSdkVersion androidConfig.minSdkVersion
        targetSdkVersion androidConfig.targetSdkVersion
        versionCode androidConfig.versionCode
        versionName mavenConfig.version
        multiDexEnabled true
    }

    signingConfigs {
        release {
            storeFile file("./keystore/dev-func-aar.jks")
            storePassword "dev-func-aar"
            keyAlias "dev-func-aar"
            keyPassword "dev-func-aar"
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            signingConfig signingConfigs.release
        }
        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro', '../proguard/consumer-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    //gradle依赖默认缓存24小时，在此期间内相同版本只会使用本地资源
    configurations.all {
        //修改缓存周期
        resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds' // 动态版本
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds' // 变化模块
    }
    flavorDimensions = ["distribution"]
    productFlavors {
        firebase {
            dimension = "distribution"
        }
        vest {
            dimension = "distribution"
        }
    }
}

android.applicationVariants.all { variant ->
    // 修改APK名称
    variant.outputs.all { output ->
        outputFileName = "vest-sdk-v${variant.versionName}-${variant.buildType.name}.apk"
    }
}


dependencies {
    // 方式一：引入Maven依赖
    def vestSdkVersion = "1.2.2"
    implementation "io.github.bumptechlab:vest-core:$vestSdkVersion"
    implementation "io.github.bumptechlab:vest-sdk:$vestSdkVersion"
    //vest-shf和vest-firebase 二选一
    if (taskName.containsIgnoreCase("vest")) {
        implementation "io.github.bumptechlab:vest-shf:$vestSdkVersion"
    } else if (taskName.containsIgnoreCase("firebase")) {
        implementation "io.github.bumptechlab:vest-firebase:$vestSdkVersion"
    } else {
        compileOnly "io.github.bumptechlab:vest-shf:$vestSdkVersion"
        compileOnly "io.github.bumptechlab:vest-firebase:$vestSdkVersion"
    }
    // 方式二：引入工程依赖
//    implementation project(":app-core")
//    implementation project(":app-sdk")
//    implementation project(":app-shf")
//    implementation project(":app-firebase")
//    implementation "androidx.multidex:multidex:$dependenciesConfig.androidxMultidexVersion"
//    implementation "androidx.annotation:annotation:$dependenciesConfig.androidxAnnotation"

    // 方式三：引入本地Libs依赖（同时要引入以下三方依赖）
//    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
//    implementation "androidx.appcompat:appcompat:$dependenciesConfig.androidxAppcompatVersion"
//    implementation "androidx.multidex:multidex:$dependenciesConfig.androidxMultidexVersion"
//    implementation "androidx.annotation:annotation:$dependenciesConfig.androidxAnnotation"
//    implementation "com.android.installreferrer:installreferrer:$dependenciesConfig.installreferrerVersion"
//    implementation "com.google.android.gms:play-services-ads-identifier:$dependenciesConfig.googlePlayServiceVersion"
//    implementation "com.squareup.okhttp3:okhttp:$dependenciesConfig.okhttpVersion"
//    implementation "com.squareup.okhttp3:logging-interceptor:$dependenciesConfig.okhttpVersion"
//    implementation "com.adjust.sdk:adjust-android:$dependenciesConfig.adjustVersion"
//    implementation "io.reactivex.rxjava3:rxjava:$dependenciesConfig.rxJavaVersion"
//    implementation "io.reactivex.rxjava3:rxandroid:$dependenciesConfig.rxAndroidVersion"
//    implementation "com.squareup.retrofit2:retrofit:$dependenciesConfig.retrofit2Version"
//    implementation "com.squareup.retrofit2:adapter-rxjava3:$dependenciesConfig.retrofit2Version"
//    implementation "com.squareup.retrofit2:converter-gson:$dependenciesConfig.retrofit2Version"
//    implementation "org.greenrobot:eventbus:$dependenciesConfig.eventBusVersion"
//    implementation "androidx.activity:activity-compose:$dependenciesConfig.activityCompose"
//    implementation "androidx.compose.material3:material3:$dependenciesConfig.composeMaterial3"
//    implementation "androidx.compose.ui:ui:$dependenciesConfig.composeUI"
//    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$dependenciesConfig.kotlinCoroutinesVersion"
//    implementation "com.google.firebase:firebase-config-ktx:$dependenciesConfig.firebaseConfigVersion"
}